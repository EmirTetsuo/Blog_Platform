{"ast":null,"code":"function noop() {}\n\nconst localStorageManager = _ref => {\n  let {\n    key,\n    storageWindow\n  } = _ref;\n\n  if (!storageWindow && typeof window !== 'undefined') {\n    storageWindow = window;\n  }\n\n  return {\n    get(defaultValue) {\n      if (typeof window === 'undefined') {\n        return undefined;\n      }\n\n      if (!storageWindow) {\n        return defaultValue;\n      }\n\n      let value;\n\n      try {\n        value = storageWindow.localStorage.getItem(key);\n      } catch {// Unsupported\n      }\n\n      return value || defaultValue;\n    },\n\n    set: value => {\n      if (storageWindow) {\n        try {\n          storageWindow.localStorage.setItem(key, value);\n        } catch {// Unsupported\n        }\n      }\n    },\n    subscribe: handler => {\n      if (!storageWindow) {\n        return noop;\n      }\n\n      const listener = event => {\n        const value = event.newValue;\n\n        if (event.key === key) {\n          handler(value);\n        }\n      };\n\n      storageWindow.addEventListener('storage', listener);\n      return () => {\n        storageWindow.removeEventListener('storage', listener);\n      };\n    }\n  };\n};\n\nexport default localStorageManager;","map":null,"metadata":{},"sourceType":"module"}