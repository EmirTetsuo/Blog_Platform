{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n\n  const defaultColorSchemes = {};\n  const defaultComponents = {};\n\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageManager,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false,\n      defaultMode: initialMode = 'system',\n      forceThemeRerender = false,\n      noSsr\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const restThemeProp = scopedTheme || initialTheme;\n    const {\n      colorSchemes = defaultColorSchemes,\n      components = defaultComponents,\n      cssVarPrefix\n    } = restThemeProp;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageManager,\n      storageWindow,\n      noSsr\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (forceThemeRerender && !restThemeProp.vars) {\n        console.warn(['MUI: The `forceThemeRerender` prop should only be used with CSS theme variables.', 'Note that it will slow down the app when changing between modes, so only do this when you cannot find a better solution.'].join('\\n'));\n      }\n    } // `colorScheme` is undefined on the server and hydration phase\n\n\n    let calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n\n    if (restThemeProp.vars && !forceThemeRerender) {\n      calculatedColorScheme = restThemeProp.defaultColorScheme;\n    }\n\n    const memoTheme = React.useMemo(() => {\n      // 2. get the `vars` object that refers to the CSS custom properties\n      const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars; // 3. Start composing the theme object\n\n      const theme = { ...restThemeProp,\n        components,\n        colorSchemes,\n        cssVarPrefix,\n        vars: themeVars\n      };\n\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      } // 4. Resolve the color scheme and merge it to the theme\n\n\n      if (calculatedColorScheme) {\n        const scheme = colorSchemes[calculatedColorScheme];\n\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(schemeKey => {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = { ...theme[schemeKey],\n                ...scheme[schemeKey]\n              };\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, calculatedColorScheme, components, colorSchemes, cssVarPrefix]); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    useEnhancedEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode: process.env.NODE_ENV === 'production' ? setMode : newMode => {\n        if (memoTheme.colorSchemeSelector === 'media') {\n          console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n        }\n\n        setMode(newMode);\n      },\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    let shouldGenerateStyleSheet = true;\n\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: memoTheme.generateStyleSheets?.() || []\n      })]\n    });\n\n    if (nested) {\n      return element;\n    }\n\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * If `true`, theme values are recalculated when the mode changes.\n     */\n    forceThemeRerender: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n\n    /**\n     * The storage manager to be used for storing the mode and color scheme\n     * @default using `window.localStorage`\n     */\n    storageManager: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["React","PropTypes","GlobalStyles","useTheme","muiUseTheme","useEnhancedEffect","ThemeProvider","InitColorSchemeScript","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","themeId","theme","defaultTheme","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","disableTransitionOnChange","designSystemTransitionOnChange","defaultColorScheme","resolveTheme","defaultContext","allColorSchemes","colorScheme","undefined","darkColorScheme","lightColorScheme","mode","setColorScheme","setMode","systemMode","ColorSchemeContext","createContext","process","env","NODE_ENV","displayName","useColorScheme","useContext","defaultColorSchemes","defaultComponents","CssVarsProvider","props","children","themeProp","storageManager","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","disableNestedContext","disableStyleSheetGeneration","defaultMode","initialMode","forceThemeRerender","noSsr","hasMounted","useRef","upperTheme","ctx","nested","initialTheme","useMemo","scopedTheme","restThemeProp","colorSchemes","components","cssVarPrefix","joinedColorSchemes","Object","keys","filter","k","join","split","defaultLightColorScheme","light","defaultDarkColorScheme","dark","palette","stateMode","stateColorScheme","supportedColorSchemes","vars","console","warn","calculatedColorScheme","memoTheme","themeVars","generateThemeVars","generateSpacing","spacing","scheme","forEach","schemeKey","colorSchemeSelector","selector","rule","startsWith","includes","classList","remove","map","substring","replace","add","matches","match","attr","value","removeAttribute","setAttribute","useEffect","timer","current","css","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","contextValue","newMode","error","shouldGenerateStyleSheet","cssVariables","element","Fragment","styles","generateStyleSheets","Provider","propTypes","node","any","string","bool","func","object","getInitColorSchemeScript","params"],"sources":["C:/Users/neo/Desktop/veb/23.02.23/Blog/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { useTheme as muiUseTheme } from '@mui/private-theming';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport ThemeProvider from \"../ThemeProvider/index.js\";\nimport InitColorSchemeScript, { DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport useCurrentColorScheme from \"./useCurrentColorScheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    defaultColorScheme,\n    resolveTheme\n  } = options;\n  const defaultContext = {\n    allColorSchemes: [],\n    colorScheme: undefined,\n    darkColorScheme: undefined,\n    lightColorScheme: undefined,\n    mode: undefined,\n    setColorScheme: () => {},\n    setMode: () => {},\n    systemMode: undefined\n  };\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => React.useContext(ColorSchemeContext) || defaultContext;\n  const defaultColorSchemes = {};\n  const defaultComponents = {};\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageManager,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false,\n      defaultMode: initialMode = 'system',\n      forceThemeRerender = false,\n      noSsr\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = muiUseTheme();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const initialTheme = React.useMemo(() => {\n      if (themeProp) {\n        return themeProp;\n      }\n      return typeof defaultTheme === 'function' ? defaultTheme() : defaultTheme;\n    }, [themeProp]);\n    const scopedTheme = initialTheme[themeId];\n    const restThemeProp = scopedTheme || initialTheme;\n    const {\n      colorSchemes = defaultColorSchemes,\n      components = defaultComponents,\n      cssVarPrefix\n    } = restThemeProp;\n    const joinedColorSchemes = Object.keys(colorSchemes).filter(k => !!colorSchemes[k]).join(',');\n    const allColorSchemes = React.useMemo(() => joinedColorSchemes.split(','), [joinedColorSchemes]);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const defaultMode = colorSchemes[defaultLightColorScheme] && colorSchemes[defaultDarkColorScheme] ? initialMode : colorSchemes[restThemeProp.defaultColorScheme]?.palette?.mode || restThemeProp.palette?.mode;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageManager,\n      storageWindow,\n      noSsr\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (forceThemeRerender && !restThemeProp.vars) {\n        console.warn(['MUI: The `forceThemeRerender` prop should only be used with CSS theme variables.', 'Note that it will slow down the app when changing between modes, so only do this when you cannot find a better solution.'].join('\\n'));\n      }\n    }\n\n    // `colorScheme` is undefined on the server and hydration phase\n    let calculatedColorScheme = colorScheme || restThemeProp.defaultColorScheme;\n    if (restThemeProp.vars && !forceThemeRerender) {\n      calculatedColorScheme = restThemeProp.defaultColorScheme;\n    }\n    const memoTheme = React.useMemo(() => {\n      // 2. get the `vars` object that refers to the CSS custom properties\n      const themeVars = restThemeProp.generateThemeVars?.() || restThemeProp.vars;\n\n      // 3. Start composing the theme object\n      const theme = {\n        ...restThemeProp,\n        components,\n        colorSchemes,\n        cssVarPrefix,\n        vars: themeVars\n      };\n      if (typeof theme.generateSpacing === 'function') {\n        theme.spacing = theme.generateSpacing();\n      }\n\n      // 4. Resolve the color scheme and merge it to the theme\n      if (calculatedColorScheme) {\n        const scheme = colorSchemes[calculatedColorScheme];\n        if (scheme && typeof scheme === 'object') {\n          // 4.1 Merge the selected color scheme to the theme\n          Object.keys(scheme).forEach(schemeKey => {\n            if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n              // shallow merge the 1st level structure of the theme.\n              theme[schemeKey] = {\n                ...theme[schemeKey],\n                ...scheme[schemeKey]\n              };\n            } else {\n              theme[schemeKey] = scheme[schemeKey];\n            }\n          });\n        }\n      }\n      return resolveTheme ? resolveTheme(theme) : theme;\n    }, [restThemeProp, calculatedColorScheme, components, colorSchemes, cssVarPrefix]);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    const colorSchemeSelector = restThemeProp.colorSchemeSelector;\n    useEnhancedEffect(() => {\n      if (colorScheme && colorSchemeNode && colorSchemeSelector && colorSchemeSelector !== 'media') {\n        const selector = colorSchemeSelector;\n        let rule = colorSchemeSelector;\n        if (selector === 'class') {\n          rule = `.%s`;\n        }\n        if (selector === 'data') {\n          rule = `[data-%s]`;\n        }\n        if (selector?.startsWith('data-') && !selector.includes('%s')) {\n          // 'data-mui-color-scheme' -> '[data-mui-color-scheme=\"%s\"]'\n          rule = `[${selector}=\"%s\"]`;\n        }\n        if (rule.startsWith('.')) {\n          colorSchemeNode.classList.remove(...allColorSchemes.map(scheme => rule.substring(1).replace('%s', scheme)));\n          colorSchemeNode.classList.add(rule.substring(1).replace('%s', colorScheme));\n        } else {\n          const matches = rule.replace('%s', colorScheme).match(/\\[([^\\]]+)\\]/);\n          if (matches) {\n            const [attr, value] = matches[1].split('=');\n            if (!value) {\n              // for attributes like `data-theme-dark`, `data-theme-light`\n              // remove all the existing data attributes before setting the new one\n              allColorSchemes.forEach(scheme => {\n                colorSchemeNode.removeAttribute(attr.replace(colorScheme, scheme));\n              });\n            }\n            colorSchemeNode.setAttribute(attr, value ? value.replace(/\"|'/g, '') : '');\n          } else {\n            colorSchemeNode.setAttribute(rule, colorScheme);\n          }\n        }\n      }\n    }, [colorScheme, colorSchemeSelector, colorSchemeNode, allColorSchemes]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode: process.env.NODE_ENV === 'production' ? setMode : newMode => {\n        if (memoTheme.colorSchemeSelector === 'media') {\n          console.error(['MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).', 'To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.', 'To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually'].join('\\n'));\n        }\n        setMode(newMode);\n      },\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode, memoTheme.colorSchemeSelector]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || restThemeProp.cssVariables === false || nested && upperTheme?.cssVarPrefix === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [/*#__PURE__*/_jsx(ThemeProvider, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: memoTheme,\n        children: children\n      }), shouldGenerateStyleSheet && /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: memoTheme.generateStyleSheets?.() || []\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/_jsx(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The default mode when the storage is empty,\n     * require the theme to have `colorSchemes` with light and dark.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: PropTypes.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: PropTypes.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: PropTypes.any,\n    /**\n     * If `true`, theme values are recalculated when the mode changes.\n     */\n    forceThemeRerender: PropTypes.bool,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.\n     * You should use this option in conjuction with `InitColorSchemeScript` component.\n     */\n    noSsr: PropTypes.bool,\n    /**\n     * The storage manager to be used for storing the mode and color scheme\n     * @default using `window.localStorage`\n     */\n    storageManager: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n  const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n  const getInitColorSchemeScript = params => InitColorSchemeScript({\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey,\n    ...params\n  });\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}