{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport localStorageManager from \"./localStorageManager.js\";\n\nfunction noop() {}\n\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    storageManager = localStorageManager,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const modeStorage = React.useMemo(() => storageManager?.({\n    key: modeStorageKey,\n    storageWindow\n  }), [storageManager, modeStorageKey, storageWindow]);\n  const lightStorage = React.useMemo(() => storageManager?.({\n    key: `${colorSchemeStorageKey}-light`,\n    storageWindow\n  }), [storageManager, colorSchemeStorageKey, storageWindow]);\n  const darkStorage = React.useMemo(() => storageManager?.({\n    key: `${colorSchemeStorageKey}-dark`,\n    storageWindow\n  }), [storageManager, colorSchemeStorageKey, storageWindow]);\n  const [state, setState] = React.useState(() => {\n    const initialMode = modeStorage?.get(defaultMode) || defaultMode;\n    const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;\n    const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n\n      const newMode = mode ?? defaultMode;\n      modeStorage?.set(newMode);\n      return { ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorage, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        lightStorage?.set(defaultLightColorScheme);\n        darkStorage?.set(defaultDarkColorScheme);\n        return { ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = { ...currentState\n          };\n          processState(currentState, mode => {\n            if (mode === 'light') {\n              lightStorage?.set(value);\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              darkStorage?.set(value);\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = { ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            lightStorage?.set(newLightColorScheme);\n          }\n        }\n\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            darkStorage?.set(newDarkColorScheme);\n          }\n        }\n\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, lightStorage, darkStorage, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light'; // Early exit, nothing changed.\n\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n\n        return { ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n\n    const handler = function () {\n      return mediaListener.current(...arguments);\n    }; // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    if (isMultiSchemes) {\n      const unsubscribeMode = modeStorage?.subscribe(value => {\n        if (!value || ['light', 'dark', 'system'].includes(value)) {\n          setMode(value || defaultMode);\n        }\n      }) || noop;\n      const unsubscribeLight = lightStorage?.subscribe(value => {\n        if (!value || joinedColorSchemes.match(value)) {\n          setColorScheme({\n            light: value\n          });\n        }\n      }) || noop;\n      const unsubscribeDark = darkStorage?.subscribe(value => {\n        if (!value || joinedColorSchemes.match(value)) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }) || noop;\n      return () => {\n        unsubscribeMode();\n        unsubscribeLight();\n        unsubscribeDark();\n      };\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes, modeStorage, lightStorage, darkStorage]);\n  return { ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}","map":{"version":3,"names":["React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","localStorageManager","noop","getSystemMode","mode","window","matchMedia","mql","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","storageManager","noSsr","joinedColorSchemes","join","isMultiSchemes","length","modeStorage","useMemo","key","lightStorage","darkStorage","setState","useState","initialMode","get","isClient","setIsClient","useEffect","colorScheme","setMode","useCallback","currentState","newMode","set","setColorScheme","value","includes","console","error","newState","newLightColorScheme","light","newDarkColorScheme","dark","handleMediaQuery","event","mediaListener","useRef","current","handler","media","addListener","removeListener","unsubscribeMode","subscribe","unsubscribeLight","match","unsubscribeDark"],"sources":["C:/Users/neo/Desktop/veb/23.02.23/Blog/frontend/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\nimport localStorageManager from \"./localStorageManager.js\";\nfunction noop() {}\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && typeof window.matchMedia === 'function' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      return 'dark';\n    }\n    return 'light';\n  }\n  return undefined;\n}\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n  return undefined;\n}\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n    return undefined;\n  });\n}\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    storageManager = localStorageManager,\n    noSsr = false\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const isMultiSchemes = supportedColorSchemes.length > 1;\n  const modeStorage = React.useMemo(() => storageManager?.({\n    key: modeStorageKey,\n    storageWindow\n  }), [storageManager, modeStorageKey, storageWindow]);\n  const lightStorage = React.useMemo(() => storageManager?.({\n    key: `${colorSchemeStorageKey}-light`,\n    storageWindow\n  }), [storageManager, colorSchemeStorageKey, storageWindow]);\n  const darkStorage = React.useMemo(() => storageManager?.({\n    key: `${colorSchemeStorageKey}-dark`,\n    storageWindow\n  }), [storageManager, colorSchemeStorageKey, storageWindow]);\n  const [state, setState] = React.useState(() => {\n    const initialMode = modeStorage?.get(defaultMode) || defaultMode;\n    const lightColorScheme = lightStorage?.get(defaultLightColorScheme) || defaultLightColorScheme;\n    const darkColorScheme = darkStorage?.get(defaultDarkColorScheme) || defaultDarkColorScheme;\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme,\n      darkColorScheme\n    };\n  });\n  const [isClient, setIsClient] = React.useState(noSsr || !isMultiSchemes);\n  React.useEffect(() => {\n    setIsClient(true); // to rerender the component after hydration\n  }, []);\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      if (mode === currentState.mode) {\n        // do nothing if mode does not change\n        return currentState;\n      }\n      const newMode = mode ?? defaultMode;\n      modeStorage?.set(newMode);\n      return {\n        ...currentState,\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      };\n    });\n  }, [modeStorage, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value) {\n      setState(currentState => {\n        lightStorage?.set(defaultLightColorScheme);\n        darkStorage?.set(defaultDarkColorScheme);\n        return {\n          ...currentState,\n          lightColorScheme: defaultLightColorScheme,\n          darkColorScheme: defaultDarkColorScheme\n        };\n      });\n    } else if (typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = {\n            ...currentState\n          };\n          processState(currentState, mode => {\n            if (mode === 'light') {\n              lightStorage?.set(value);\n              newState.lightColorScheme = value;\n            }\n            if (mode === 'dark') {\n              darkStorage?.set(value);\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else {\n      setState(currentState => {\n        const newState = {\n          ...currentState\n        };\n        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        if (newLightColorScheme) {\n          if (!joinedColorSchemes.includes(newLightColorScheme)) {\n            console.error(`\\`${newLightColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.lightColorScheme = newLightColorScheme;\n            lightStorage?.set(newLightColorScheme);\n          }\n        }\n        if (newDarkColorScheme) {\n          if (!joinedColorSchemes.includes(newDarkColorScheme)) {\n            console.error(`\\`${newDarkColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n          } else {\n            newState.darkColorScheme = newDarkColorScheme;\n            darkStorage?.set(newDarkColorScheme);\n          }\n        }\n        return newState;\n      });\n    }\n  }, [joinedColorSchemes, lightStorage, darkStorage, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(event => {\n    if (state.mode === 'system') {\n      setState(currentState => {\n        const systemMode = event?.matches ? 'dark' : 'light';\n\n        // Early exit, nothing changed.\n        if (currentState.systemMode === systemMode) {\n          return currentState;\n        }\n        return {\n          ...currentState,\n          systemMode\n        };\n      });\n    }\n  }, [state.mode]);\n\n  // Ref hack to avoid adding handleMediaQuery as a dep\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    if (typeof window.matchMedia !== 'function' || !isMultiSchemes) {\n      return undefined;\n    }\n    const handler = (...args) => mediaListener.current(...args);\n\n    // Always listen to System preference\n    const media = window.matchMedia('(prefers-color-scheme: dark)');\n\n    // Intentionally use deprecated listener methods to support iOS & old browsers\n    media.addListener(handler);\n    handler(media);\n    return () => {\n      media.removeListener(handler);\n    };\n  }, [isMultiSchemes]);\n\n  // Handle when localStorage has changed\n  React.useEffect(() => {\n    if (isMultiSchemes) {\n      const unsubscribeMode = modeStorage?.subscribe(value => {\n        if (!value || ['light', 'dark', 'system'].includes(value)) {\n          setMode(value || defaultMode);\n        }\n      }) || noop;\n      const unsubscribeLight = lightStorage?.subscribe(value => {\n        if (!value || joinedColorSchemes.match(value)) {\n          setColorScheme({\n            light: value\n          });\n        }\n      }) || noop;\n      const unsubscribeDark = darkStorage?.subscribe(value => {\n        if (!value || joinedColorSchemes.match(value)) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }) || noop;\n      return () => {\n        unsubscribeMode();\n        unsubscribeLight();\n        unsubscribeDark();\n      };\n    }\n    return undefined;\n  }, [setColorScheme, setMode, joinedColorSchemes, defaultMode, storageWindow, isMultiSchemes, modeStorage, lightStorage, darkStorage]);\n  return {\n    ...state,\n    mode: isClient ? state.mode : undefined,\n    systemMode: isClient ? state.systemMode : undefined,\n    colorScheme: isClient ? colorScheme : undefined,\n    setMode,\n    setColorScheme\n  };\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,wBAAT,EAAmCC,gCAAnC,QAA2E,mDAA3E;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;;AACA,SAASC,IAAT,GAAgB,CAAE;;AAClB,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAClC,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,UAAd,KAA6B,UAA9D,IAA4EF,IAAI,KAAK,QAAzF,EAAmG;IACjG,MAAMG,GAAG,GAAGF,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAZ;;IACA,IAAIC,GAAG,CAACC,OAAR,EAAiB;MACf,OAAO,MAAP;IACD;;IACD,OAAO,OAAP;EACD;;EACD,OAAOC,SAAP;AACD;;AACD,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;EACrC,IAAID,KAAK,CAACP,IAAN,KAAe,OAAf,IAA0BO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,OAA9E,EAAuF;IACrF,OAAOD,QAAQ,CAAC,OAAD,CAAf;EACD;;EACD,IAAID,KAAK,CAACP,IAAN,KAAe,MAAf,IAAyBO,KAAK,CAACP,IAAN,KAAe,QAAf,IAA2BO,KAAK,CAACE,UAAN,KAAqB,MAA7E,EAAqF;IACnF,OAAOD,QAAQ,CAAC,MAAD,CAAf;EACD;;EACD,OAAOH,SAAP;AACD;;AACD,OAAO,SAASK,cAAT,CAAwBH,KAAxB,EAA+B;EACpC,OAAOD,YAAY,CAACC,KAAD,EAAQP,IAAI,IAAI;IACjC,IAAIA,IAAI,KAAK,OAAb,EAAsB;MACpB,OAAOO,KAAK,CAACI,gBAAb;IACD;;IACD,IAAIX,IAAI,KAAK,MAAb,EAAqB;MACnB,OAAOO,KAAK,CAACK,eAAb;IACD;;IACD,OAAOP,SAAP;EACD,CARkB,CAAnB;AASD;AACD,eAAe,SAASQ,qBAAT,CAA+BC,OAA/B,EAAwC;EACrD,MAAM;IACJC,WAAW,GAAG,OADV;IAEJC,uBAFI;IAGJC,sBAHI;IAIJC,qBAAqB,GAAG,EAJpB;IAKJC,cAAc,GAAGxB,wBALb;IAMJyB,qBAAqB,GAAGxB,gCANpB;IAOJyB,aAAa,GAAG,OAAOpB,MAAP,KAAkB,WAAlB,GAAgCI,SAAhC,GAA4CJ,MAPxD;IAQJqB,cAAc,GAAGzB,mBARb;IASJ0B,KAAK,GAAG;EATJ,IAUFT,OAVJ;EAWA,MAAMU,kBAAkB,GAAGN,qBAAqB,CAACO,IAAtB,CAA2B,GAA3B,CAA3B;EACA,MAAMC,cAAc,GAAGR,qBAAqB,CAACS,MAAtB,GAA+B,CAAtD;EACA,MAAMC,WAAW,GAAGlC,KAAK,CAACmC,OAAN,CAAc,MAAMP,cAAc,GAAG;IACvDQ,GAAG,EAAEX,cADkD;IAEvDE;EAFuD,CAAH,CAAlC,EAGhB,CAACC,cAAD,EAAiBH,cAAjB,EAAiCE,aAAjC,CAHgB,CAApB;EAIA,MAAMU,YAAY,GAAGrC,KAAK,CAACmC,OAAN,CAAc,MAAMP,cAAc,GAAG;IACxDQ,GAAG,EAAG,GAAEV,qBAAsB,QAD0B;IAExDC;EAFwD,CAAH,CAAlC,EAGjB,CAACC,cAAD,EAAiBF,qBAAjB,EAAwCC,aAAxC,CAHiB,CAArB;EAIA,MAAMW,WAAW,GAAGtC,KAAK,CAACmC,OAAN,CAAc,MAAMP,cAAc,GAAG;IACvDQ,GAAG,EAAG,GAAEV,qBAAsB,OADyB;IAEvDC;EAFuD,CAAH,CAAlC,EAGhB,CAACC,cAAD,EAAiBF,qBAAjB,EAAwCC,aAAxC,CAHgB,CAApB;EAIA,MAAM,CAACd,KAAD,EAAQ0B,QAAR,IAAoBvC,KAAK,CAACwC,QAAN,CAAe,MAAM;IAC7C,MAAMC,WAAW,GAAGP,WAAW,EAAEQ,GAAb,CAAiBrB,WAAjB,KAAiCA,WAArD;IACA,MAAMJ,gBAAgB,GAAGoB,YAAY,EAAEK,GAAd,CAAkBpB,uBAAlB,KAA8CA,uBAAvE;IACA,MAAMJ,eAAe,GAAGoB,WAAW,EAAEI,GAAb,CAAiBnB,sBAAjB,KAA4CA,sBAApE;IACA,OAAO;MACLjB,IAAI,EAAEmC,WADD;MAEL1B,UAAU,EAAEV,aAAa,CAACoC,WAAD,CAFpB;MAGLxB,gBAHK;MAILC;IAJK,CAAP;EAMD,CAVyB,CAA1B;EAWA,MAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B5C,KAAK,CAACwC,QAAN,CAAeX,KAAK,IAAI,CAACG,cAAzB,CAAhC;EACAhC,KAAK,CAAC6C,SAAN,CAAgB,MAAM;IACpBD,WAAW,CAAC,IAAD,CAAX,CADoB,CACD;EACpB,CAFD,EAEG,EAFH;EAGA,MAAME,WAAW,GAAG9B,cAAc,CAACH,KAAD,CAAlC;EACA,MAAMkC,OAAO,GAAG/C,KAAK,CAACgD,WAAN,CAAkB1C,IAAI,IAAI;IACxCiC,QAAQ,CAACU,YAAY,IAAI;MACvB,IAAI3C,IAAI,KAAK2C,YAAY,CAAC3C,IAA1B,EAAgC;QAC9B;QACA,OAAO2C,YAAP;MACD;;MACD,MAAMC,OAAO,GAAG5C,IAAI,IAAIe,WAAxB;MACAa,WAAW,EAAEiB,GAAb,CAAiBD,OAAjB;MACA,OAAO,EACL,GAAGD,YADE;QAEL3C,IAAI,EAAE4C,OAFD;QAGLnC,UAAU,EAAEV,aAAa,CAAC6C,OAAD;MAHpB,CAAP;IAKD,CAZO,CAAR;EAaD,CAde,EAcb,CAAChB,WAAD,EAAcb,WAAd,CAda,CAAhB;EAeA,MAAM+B,cAAc,GAAGpD,KAAK,CAACgD,WAAN,CAAkBK,KAAK,IAAI;IAChD,IAAI,CAACA,KAAL,EAAY;MACVd,QAAQ,CAACU,YAAY,IAAI;QACvBZ,YAAY,EAAEc,GAAd,CAAkB7B,uBAAlB;QACAgB,WAAW,EAAEa,GAAb,CAAiB5B,sBAAjB;QACA,OAAO,EACL,GAAG0B,YADE;UAELhC,gBAAgB,EAAEK,uBAFb;UAGLJ,eAAe,EAAEK;QAHZ,CAAP;MAKD,CARO,CAAR;IASD,CAVD,MAUO,IAAI,OAAO8B,KAAP,KAAiB,QAArB,EAA+B;MACpC,IAAIA,KAAK,IAAI,CAACvB,kBAAkB,CAACwB,QAAnB,CAA4BD,KAA5B,CAAd,EAAkD;QAChDE,OAAO,CAACC,KAAR,CAAe,KAAIH,KAAM,8CAAzB;MACD,CAFD,MAEO;QACLd,QAAQ,CAACU,YAAY,IAAI;UACvB,MAAMQ,QAAQ,GAAG,EACf,GAAGR;UADY,CAAjB;UAGArC,YAAY,CAACqC,YAAD,EAAe3C,IAAI,IAAI;YACjC,IAAIA,IAAI,KAAK,OAAb,EAAsB;cACpB+B,YAAY,EAAEc,GAAd,CAAkBE,KAAlB;cACAI,QAAQ,CAACxC,gBAAT,GAA4BoC,KAA5B;YACD;;YACD,IAAI/C,IAAI,KAAK,MAAb,EAAqB;cACnBgC,WAAW,EAAEa,GAAb,CAAiBE,KAAjB;cACAI,QAAQ,CAACvC,eAAT,GAA2BmC,KAA3B;YACD;UACF,CATW,CAAZ;UAUA,OAAOI,QAAP;QACD,CAfO,CAAR;MAgBD;IACF,CArBM,MAqBA;MACLlB,QAAQ,CAACU,YAAY,IAAI;QACvB,MAAMQ,QAAQ,GAAG,EACf,GAAGR;QADY,CAAjB;QAGA,MAAMS,mBAAmB,GAAGL,KAAK,CAACM,KAAN,KAAgB,IAAhB,GAAuBrC,uBAAvB,GAAiD+B,KAAK,CAACM,KAAnF;QACA,MAAMC,kBAAkB,GAAGP,KAAK,CAACQ,IAAN,KAAe,IAAf,GAAsBtC,sBAAtB,GAA+C8B,KAAK,CAACQ,IAAhF;;QACA,IAAIH,mBAAJ,EAAyB;UACvB,IAAI,CAAC5B,kBAAkB,CAACwB,QAAnB,CAA4BI,mBAA5B,CAAL,EAAuD;YACrDH,OAAO,CAACC,KAAR,CAAe,KAAIE,mBAAoB,8CAAvC;UACD,CAFD,MAEO;YACLD,QAAQ,CAACxC,gBAAT,GAA4ByC,mBAA5B;YACArB,YAAY,EAAEc,GAAd,CAAkBO,mBAAlB;UACD;QACF;;QACD,IAAIE,kBAAJ,EAAwB;UACtB,IAAI,CAAC9B,kBAAkB,CAACwB,QAAnB,CAA4BM,kBAA5B,CAAL,EAAsD;YACpDL,OAAO,CAACC,KAAR,CAAe,KAAII,kBAAmB,8CAAtC;UACD,CAFD,MAEO;YACLH,QAAQ,CAACvC,eAAT,GAA2B0C,kBAA3B;YACAtB,WAAW,EAAEa,GAAb,CAAiBS,kBAAjB;UACD;QACF;;QACD,OAAOH,QAAP;MACD,CAvBO,CAAR;IAwBD;EACF,CA1DsB,EA0DpB,CAAC3B,kBAAD,EAAqBO,YAArB,EAAmCC,WAAnC,EAAgDhB,uBAAhD,EAAyEC,sBAAzE,CA1DoB,CAAvB;EA2DA,MAAMuC,gBAAgB,GAAG9D,KAAK,CAACgD,WAAN,CAAkBe,KAAK,IAAI;IAClD,IAAIlD,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;MAC3BiC,QAAQ,CAACU,YAAY,IAAI;QACvB,MAAMlC,UAAU,GAAGgD,KAAK,EAAErD,OAAP,GAAiB,MAAjB,GAA0B,OAA7C,CADuB,CAGvB;;QACA,IAAIuC,YAAY,CAAClC,UAAb,KAA4BA,UAAhC,EAA4C;UAC1C,OAAOkC,YAAP;QACD;;QACD,OAAO,EACL,GAAGA,YADE;UAELlC;QAFK,CAAP;MAID,CAXO,CAAR;IAYD;EACF,CAfwB,EAetB,CAACF,KAAK,CAACP,IAAP,CAfsB,CAAzB,CApHqD,CAqIrD;;EACA,MAAM0D,aAAa,GAAGhE,KAAK,CAACiE,MAAN,CAAaH,gBAAb,CAAtB;EACAE,aAAa,CAACE,OAAd,GAAwBJ,gBAAxB;EACA9D,KAAK,CAAC6C,SAAN,CAAgB,MAAM;IACpB,IAAI,OAAOtC,MAAM,CAACC,UAAd,KAA6B,UAA7B,IAA2C,CAACwB,cAAhD,EAAgE;MAC9D,OAAOrB,SAAP;IACD;;IACD,MAAMwD,OAAO,GAAG;MAAA,OAAaH,aAAa,CAACE,OAAd,CAAsB,YAAtB,CAAb;IAAA,CAAhB,CAJoB,CAMpB;;;IACA,MAAME,KAAK,GAAG7D,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAd,CAPoB,CASpB;;IACA4D,KAAK,CAACC,WAAN,CAAkBF,OAAlB;IACAA,OAAO,CAACC,KAAD,CAAP;IACA,OAAO,MAAM;MACXA,KAAK,CAACE,cAAN,CAAqBH,OAArB;IACD,CAFD;EAGD,CAfD,EAeG,CAACnC,cAAD,CAfH,EAxIqD,CAyJrD;;EACAhC,KAAK,CAAC6C,SAAN,CAAgB,MAAM;IACpB,IAAIb,cAAJ,EAAoB;MAClB,MAAMuC,eAAe,GAAGrC,WAAW,EAAEsC,SAAb,CAAuBnB,KAAK,IAAI;QACtD,IAAI,CAACA,KAAD,IAAU,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4BC,QAA5B,CAAqCD,KAArC,CAAd,EAA2D;UACzDN,OAAO,CAACM,KAAK,IAAIhC,WAAV,CAAP;QACD;MACF,CAJuB,KAIlBjB,IAJN;MAKA,MAAMqE,gBAAgB,GAAGpC,YAAY,EAAEmC,SAAd,CAAwBnB,KAAK,IAAI;QACxD,IAAI,CAACA,KAAD,IAAUvB,kBAAkB,CAAC4C,KAAnB,CAAyBrB,KAAzB,CAAd,EAA+C;UAC7CD,cAAc,CAAC;YACbO,KAAK,EAAEN;UADM,CAAD,CAAd;QAGD;MACF,CANwB,KAMnBjD,IANN;MAOA,MAAMuE,eAAe,GAAGrC,WAAW,EAAEkC,SAAb,CAAuBnB,KAAK,IAAI;QACtD,IAAI,CAACA,KAAD,IAAUvB,kBAAkB,CAAC4C,KAAnB,CAAyBrB,KAAzB,CAAd,EAA+C;UAC7CD,cAAc,CAAC;YACbS,IAAI,EAAER;UADO,CAAD,CAAd;QAGD;MACF,CANuB,KAMlBjD,IANN;MAOA,OAAO,MAAM;QACXmE,eAAe;QACfE,gBAAgB;QAChBE,eAAe;MAChB,CAJD;IAKD;;IACD,OAAOhE,SAAP;EACD,CA5BD,EA4BG,CAACyC,cAAD,EAAiBL,OAAjB,EAA0BjB,kBAA1B,EAA8CT,WAA9C,EAA2DM,aAA3D,EAA0EK,cAA1E,EAA0FE,WAA1F,EAAuGG,YAAvG,EAAqHC,WAArH,CA5BH;EA6BA,OAAO,EACL,GAAGzB,KADE;IAELP,IAAI,EAAEqC,QAAQ,GAAG9B,KAAK,CAACP,IAAT,GAAgBK,SAFzB;IAGLI,UAAU,EAAE4B,QAAQ,GAAG9B,KAAK,CAACE,UAAT,GAAsBJ,SAHrC;IAILmC,WAAW,EAAEH,QAAQ,GAAGG,WAAH,GAAiBnC,SAJjC;IAKLoC,OALK;IAMLK;EANK,CAAP;AAQD"},"metadata":{},"sourceType":"module"}