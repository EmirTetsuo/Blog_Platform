{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet'; // To fix [Jest performance](https://github.com/mui/material-ui/issues/45638).\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst cacheMap = new Map(); // Need to add a private variable to test the generated CSS from Emotion, this is the simplest way to do it.\n// We can't test the CSS from `style` tag easily because the `speedy: true` (produce empty text content) is enabled by Emotion.\n// Even if we disable it, JSDOM needs extra configuration to be able to parse `@layer` CSS.\n\nexport const TEST_INTERNALS_DO_NOT_USE = {\n  /**\n   * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.\n   *\n   * let rule;\n   * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {\n   *    rule = args[0];\n   * };\n   *\n   * expect(rule).to.equal(...);\n   */\n  insert: undefined\n}; // We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\n\nconst createEmotionCache = (options, CustomSheet) => {\n  const cache = createCache(options); // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n\n  cache.sheet = new CustomSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\n\nlet insertionPoint;\n\nif (typeof document === 'object') {\n  // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order\n  // For more information, see https://github.com/mui/material-ui/issues/44597\n  insertionPoint = document.querySelector('[name=\"emotion-insertion-point\"]');\n\n  if (!insertionPoint) {\n    insertionPoint = document.createElement('meta');\n    insertionPoint.setAttribute('name', 'emotion-insertion-point');\n    insertionPoint.setAttribute('content', '');\n    const head = document.querySelector('head');\n\n    if (head) {\n      head.prepend(insertionPoint);\n    }\n  }\n}\n\nfunction getCache(injectFirst, enableCssLayer) {\n  if (injectFirst || enableCssLayer) {\n    /**\n     * This is for client-side apps only.\n     * A custom sheet is required to make the GlobalStyles API injected above the insertion point.\n     * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n     */\n    class MyStyleSheet extends StyleSheet {\n      insert(rule, options) {\n        if (TEST_INTERNALS_DO_NOT_USE.insert) {\n          return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);\n        }\n\n        if (this.key && this.key.endsWith('global')) {\n          this.before = insertionPoint;\n        }\n\n        return super.insert(rule, options);\n      }\n\n    }\n\n    const emotionCache = createEmotionCache({\n      key: 'css',\n      insertionPoint: injectFirst ? insertionPoint : undefined\n    }, MyStyleSheet);\n\n    if (enableCssLayer) {\n      const prevInsert = emotionCache.insert;\n\n      emotionCache.insert = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (!args[1].styles.startsWith('@layer')) {\n          // avoid nested @layer\n          args[1].styles = `@layer mui {${args[1].styles}}`;\n        }\n\n        return prevInsert(...args);\n      };\n    }\n\n    return emotionCache;\n  }\n\n  return undefined;\n}\n\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    enableCssLayer,\n    children\n  } = props;\n  const cache = React.useMemo(() => {\n    const cacheKey = `${injectFirst}-${enableCssLayer}`;\n\n    if (cacheMap.has(cacheKey)) {\n      return cacheMap.get(cacheKey);\n    }\n\n    const fresh = getCache(injectFirst, enableCssLayer);\n    cacheMap.set(cacheKey, fresh);\n    return fresh;\n  }, [injectFirst, enableCssLayer]);\n  return cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the styles are wrapped in `@layer mui`.\n   * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).\n   */\n  enableCssLayer: PropTypes.bool,\n\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;","map":{"version":3,"names":["React","PropTypes","CacheProvider","createCache","StyleSheet","jsx","_jsx","cacheMap","Map","TEST_INTERNALS_DO_NOT_USE","insert","undefined","createEmotionCache","options","CustomSheet","cache","sheet","key","nonce","container","speedy","isSpeedy","prepend","insertionPoint","document","querySelector","createElement","setAttribute","head","getCache","injectFirst","enableCssLayer","MyStyleSheet","rule","endsWith","before","emotionCache","prevInsert","args","styles","startsWith","StyledEngineProvider","props","children","useMemo","cacheKey","has","get","fresh","set","value","process","env","NODE_ENV","propTypes","node","bool"],"sources":["C:/Users/neo/Desktop/veb/23.02.23/Blog/node_modules/@mui/styled-engine/esm/StyledEngineProvider/StyledEngineProvider.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet';\n\n// To fix [Jest performance](https://github.com/mui/material-ui/issues/45638).\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst cacheMap = new Map();\n\n// Need to add a private variable to test the generated CSS from Emotion, this is the simplest way to do it.\n// We can't test the CSS from `style` tag easily because the `speedy: true` (produce empty text content) is enabled by Emotion.\n// Even if we disable it, JSDOM needs extra configuration to be able to parse `@layer` CSS.\nexport const TEST_INTERNALS_DO_NOT_USE = {\n  /**\n   * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.\n   *\n   * let rule;\n   * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {\n   *    rule = args[0];\n   * };\n   *\n   * expect(rule).to.equal(...);\n   */\n  insert: undefined\n};\n\n// We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\nconst createEmotionCache = (options, CustomSheet) => {\n  const cache = createCache(options);\n\n  // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n  cache.sheet = new CustomSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\nlet insertionPoint;\nif (typeof document === 'object') {\n  // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order\n  // For more information, see https://github.com/mui/material-ui/issues/44597\n  insertionPoint = document.querySelector('[name=\"emotion-insertion-point\"]');\n  if (!insertionPoint) {\n    insertionPoint = document.createElement('meta');\n    insertionPoint.setAttribute('name', 'emotion-insertion-point');\n    insertionPoint.setAttribute('content', '');\n    const head = document.querySelector('head');\n    if (head) {\n      head.prepend(insertionPoint);\n    }\n  }\n}\nfunction getCache(injectFirst, enableCssLayer) {\n  if (injectFirst || enableCssLayer) {\n    /**\n     * This is for client-side apps only.\n     * A custom sheet is required to make the GlobalStyles API injected above the insertion point.\n     * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n     */\n    class MyStyleSheet extends StyleSheet {\n      insert(rule, options) {\n        if (TEST_INTERNALS_DO_NOT_USE.insert) {\n          return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);\n        }\n        if (this.key && this.key.endsWith('global')) {\n          this.before = insertionPoint;\n        }\n        return super.insert(rule, options);\n      }\n    }\n    const emotionCache = createEmotionCache({\n      key: 'css',\n      insertionPoint: injectFirst ? insertionPoint : undefined\n    }, MyStyleSheet);\n    if (enableCssLayer) {\n      const prevInsert = emotionCache.insert;\n      emotionCache.insert = (...args) => {\n        if (!args[1].styles.startsWith('@layer')) {\n          // avoid nested @layer\n          args[1].styles = `@layer mui {${args[1].styles}}`;\n        }\n        return prevInsert(...args);\n      };\n    }\n    return emotionCache;\n  }\n  return undefined;\n}\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    enableCssLayer,\n    children\n  } = props;\n  const cache = React.useMemo(() => {\n    const cacheKey = `${injectFirst}-${enableCssLayer}`;\n    if (cacheMap.has(cacheKey)) {\n      return cacheMap.get(cacheKey);\n    }\n    const fresh = getCache(injectFirst, enableCssLayer);\n    cacheMap.set(cacheKey, fresh);\n    return fresh;\n  }, [injectFirst, enableCssLayer]);\n  return cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the styles are wrapped in `@layer mui`.\n   * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).\n   */\n  enableCssLayer: PropTypes.bool,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;"],"mappings":"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"},"metadata":{},"sourceType":"module"}