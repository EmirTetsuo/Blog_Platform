{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\n/**\n * Merges refs into a single memoized callback ref or `null`.\n *\n * ```tsx\n * const rootRef = React.useRef<Instance>(null);\n * const refFork = useForkRef(rootRef, props.ref);\n *\n * return (\n *   <Root {...props} ref={refFork} />\n * );\n * ```\n *\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\n */\n\nexport default function useForkRef() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  const cleanupRef = React.useRef(undefined);\n  const refEffect = React.useCallback(instance => {\n    const cleanups = refs.map(ref => {\n      if (ref == null) {\n        return null;\n      }\n\n      if (typeof ref === 'function') {\n        const refCallback = ref;\n        const refCleanup = refCallback(instance);\n        return typeof refCleanup === 'function' ? refCleanup : () => {\n          refCallback(null);\n        };\n      }\n\n      ref.current = instance;\n      return () => {\n        ref.current = null;\n      };\n    });\n    return () => {\n      cleanups.forEach(refCleanup => refCleanup?.());\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n\n    return value => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        cleanupRef.current = undefined;\n      }\n\n      if (value != null) {\n        cleanupRef.current = refEffect(value);\n      }\n    }; // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}","map":{"version":3,"names":["React","useForkRef","refs","cleanupRef","useRef","undefined","refEffect","useCallback","instance","cleanups","map","ref","refCallback","refCleanup","current","forEach","useMemo","every","value"],"sources":["C:/Users/neo/Desktop/veb/23.02.23/Blog/node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\n\n/**\n * Merges refs into a single memoized callback ref or `null`.\n *\n * ```tsx\n * const rootRef = React.useRef<Instance>(null);\n * const refFork = useForkRef(rootRef, props.ref);\n *\n * return (\n *   <Root {...props} ref={refFork} />\n * );\n * ```\n *\n * @param {Array<React.Ref<Instance> | undefined>} refs The ref array.\n * @returns {React.RefCallback<Instance> | null} The new ref callback.\n */\nexport default function useForkRef(...refs) {\n  const cleanupRef = React.useRef(undefined);\n  const refEffect = React.useCallback(instance => {\n    const cleanups = refs.map(ref => {\n      if (ref == null) {\n        return null;\n      }\n      if (typeof ref === 'function') {\n        const refCallback = ref;\n        const refCleanup = refCallback(instance);\n        return typeof refCleanup === 'function' ? refCleanup : () => {\n          refCallback(null);\n        };\n      }\n      ref.current = instance;\n      return () => {\n        ref.current = null;\n      };\n    });\n    return () => {\n      cleanups.forEach(refCleanup => refCleanup?.());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        cleanupRef.current = undefined;\n      }\n      if (value != null) {\n        cleanupRef.current = refEffect(value);\n      }\n    };\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler -- intentionally ignoring that the dependency array must be an array literal\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,GAA6B;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAC1C,MAAMC,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAnB;EACA,MAAMC,SAAS,GAAGN,KAAK,CAACO,WAAN,CAAkBC,QAAQ,IAAI;IAC9C,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,GAAL,CAASC,GAAG,IAAI;MAC/B,IAAIA,GAAG,IAAI,IAAX,EAAiB;QACf,OAAO,IAAP;MACD;;MACD,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;QAC7B,MAAMC,WAAW,GAAGD,GAApB;QACA,MAAME,UAAU,GAAGD,WAAW,CAACJ,QAAD,CAA9B;QACA,OAAO,OAAOK,UAAP,KAAsB,UAAtB,GAAmCA,UAAnC,GAAgD,MAAM;UAC3DD,WAAW,CAAC,IAAD,CAAX;QACD,CAFD;MAGD;;MACDD,GAAG,CAACG,OAAJ,GAAcN,QAAd;MACA,OAAO,MAAM;QACXG,GAAG,CAACG,OAAJ,GAAc,IAAd;MACD,CAFD;IAGD,CAfgB,CAAjB;IAgBA,OAAO,MAAM;MACXL,QAAQ,CAACM,OAAT,CAAiBF,UAAU,IAAIA,UAAU,IAAzC;IACD,CAFD,CAjB8C,CAoB9C;EACD,CArBiB,EAqBfX,IArBe,CAAlB;EAsBA,OAAOF,KAAK,CAACgB,OAAN,CAAc,MAAM;IACzB,IAAId,IAAI,CAACe,KAAL,CAAWN,GAAG,IAAIA,GAAG,IAAI,IAAzB,CAAJ,EAAoC;MAClC,OAAO,IAAP;IACD;;IACD,OAAOO,KAAK,IAAI;MACd,IAAIf,UAAU,CAACW,OAAf,EAAwB;QACtBX,UAAU,CAACW,OAAX;QACAX,UAAU,CAACW,OAAX,GAAqBT,SAArB;MACD;;MACD,IAAIa,KAAK,IAAI,IAAb,EAAmB;QACjBf,UAAU,CAACW,OAAX,GAAqBR,SAAS,CAACY,KAAD,CAA9B;MACD;IACF,CARD,CAJyB,CAazB;IACA;EACD,CAfM,EAeJhB,IAfI,CAAP;AAgBD"},"metadata":{},"sourceType":"module"}